/*
* Copyright (c) 2025 Rahul Anishetty
*
* This program is dual-licensed under either AGPL-3.0 or a commercial license.
* For commercial licensing options, please contact the author.
* For AGPL-3.0 licensing details, see the LICENSE file in the repository root.
*/
package com.upo.orchestrator.engine;

/**
 * Manages variables during process execution. Variables represent the data produced and consumed by
 * tasks during execution, including inputs, outputs, errors, and state changes.
 */
public interface Variables {

  /** Types of variables in process execution. */
  enum Type {
    /**
     * Processed input values provided to a task. Represents the actual values after variable
     * resolution that were used for task execution.
     */
    INPUT,
    /**
     * Output values produced by a task. Represents the results/data generated by successful task
     * execution.
     */
    OUTPUT,
    /**
     * Error information when task execution fails. Contains error details, stack traces, and any
     * error-specific data.
     */
    ERROR,
    /**
     * State changes during task execution. Represents intermediate state or metadata produced
     * during task processing.
     */
    STATE
  }

  /**
   * Adds a variable for a specific task and type.
   *
   * @param taskId identifier of the task that produced the variable
   * @param type type of variable being added
   * @param payload variable data
   */
  void addVariable(String taskId, Type type, Object payload);

  /**
   * Retrieves variable data for a specific task and type.
   *
   * @param taskId identifier of the task
   * @param type type of variable to retrieve
   * @return variable data, or null if not found
   */
  Object getVariable(String taskId, Type type);
}
