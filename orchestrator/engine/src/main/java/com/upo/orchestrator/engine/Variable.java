/*
* Copyright (c) 2025 Rahul Anishetty
*
* This program is dual-licensed under either AGPL-3.0 or a commercial license.
* For commercial licensing options, please contact the author.
* For AGPL-3.0 licensing details, see the LICENSE file in the repository root.
*/
package com.upo.orchestrator.engine;

import java.util.HashMap;
import java.util.Map;

/**
 * Represents a variable created during process execution. Variables capture task inputs, outputs,
 * errors, and state changes as tasks execute within a process.
 */
public interface Variable {

  /** Types of variables in process execution. */
  enum Type {
    /**
     * Processed input values provided to a task. Represents the actual values after variable
     * resolution that were used for task execution.
     */
    INPUT("i", "input"),
    /**
     * Output values produced by a task. Represents the results/data generated by successful task
     * execution.
     */
    OUTPUT("o", "output"),
    /**
     * Error information when task execution fails. Contains error details, stack traces, and any
     * error-specific data.
     */
    ERROR("e", "error"),
    /**
     * State changes during task execution. Represents intermediate state or metadata produced
     * during task processing.
     */
    STATE("s", "state");

    private static final Map<String, Type> KEY_VS_TYPE_MAP = new HashMap<>();

    static {
      for (Type value : Type.values()) {
        KEY_VS_TYPE_MAP.put(value.getKey(), value);
      }
    }

    private final String abbr;
    private final String key;

    Type(String abbr, String key) {
      this.abbr = abbr;
      this.key = key;
    }

    public static Type fromKey(String key) {
      return KEY_VS_TYPE_MAP.get(key);
    }

    public String getAbbr() {
      return abbr;
    }

    public String getKey() {
      return key;
    }
  }

  /**
   * Returns the ID of the task that created this variable. Used to track which task produced or
   * consumed this variable during process execution.
   *
   * @return task identifier
   */
  String getTaskId();

  /**
   * Returns the type of this variable. Variable types indicate the variable's role in process
   * execution: - INPUT: Processed input values used by task - OUTPUT: Values produced by task
   * execution - ERROR: Error details when task fails - STATE: State changes during task execution
   *
   * @return variable type
   */
  Type getType();

  /**
   * Returns the actual data/value of this variable. The structure and content of payload depends on
   * the variable type and task implementation.
   *
   * @return variable payload
   */
  Object getPayload();
}
